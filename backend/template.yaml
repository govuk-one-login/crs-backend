AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  Environment:
    Description: The name of the environment to deploy to
    Type: String
    AllowedValues:
      - dev
      - build
      - staging
      - integration
      - production
    Default: dev

  PermissionsBoundary:
    Description: |
      The ARN of the permissions boundary to apply to any role created by the template
    Type: String
    Default: none

Conditions:
  UsePermissionsBoundary: !Not
    - !Equals
      - !Ref PermissionsBoundary
      - none

Resources:
  FindAvailableSlots:
    Type: AWS::Lambda::Function
    Properties:
      Handler: src/functions/findAvailableSlotsHandler.handler
      Code:
        ZipFile: |
          export function handler(): void {
            console.log("Reached lambda function");
          }
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs20.x
      Tags:
        - Key: Environment
          Value: !Ref Environment

  LambdaSchedule:
    Type: AWS::Events::Rule
    Properties:
      Description: |
        A schedule for the Lambda function..
      ScheduleExpression: rate(7 days)
      State: ENABLED
      Targets:
        - Arn: !Sub ${FindAvailableSlots.Arn}
          Id: LambdaSchedule

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
