AWSTemplateFormatVersion: "2010-09-09"

Description: Scheduled Lambda Function with esbuild Build

Parameters:
  CodeSigningConfigArn:
    Description: The ARN of the Code Signing Config to use, provided by the deployment pipeline
    Type: String
    Default: none

  Environment:
    Description: The name of the environment to deploy to
    Type: String
    AllowedValues:
      - dev
      - build
      - staging
      - integration
      - production
    Default: dev

  PermissionsBoundary:
    Description: |
      The ARN of the permissions boundary to apply to any role created by the template
    Type: String
    Default: none

  VpcStackName:
    Description: |
      The stack name of the VPC where the Lambda functions will be deployed
    Type: String
    Default: devplatform-vpc

Mappings:
  EnvironmentVariables:
    dev:
      CertificateArnV1UsEast1: arn:aws:acm:us-east-1:537124944731:certificate/b0322e50-f75b-4fa3-ac65-4a42ac2380d3
      CertificateWildcardArnV1UsEast1: arn:aws:acm:us-east-1:537124944731:certificate/c1f3daa3-fa88-4cb2-b3cc-0d5ca43d8d80
      dnsSuffix: crs.dev.account.gov.uk
    build:
      CertificateArnV1UsEast1: arn:aws:acm:us-east-1:881490088364:certificate/e913c6e7-1b41-4d5a-8731-6f026ea12b62
      dnsSuffix: crs.build.account.gov.uk
    staging:
      CertificateArnV1UsEast1: arn:aws:acm:us-east-1:253490791635:certificate/2a8b32c4-9893-476b-a57f-881029f00db0
      dnsSuffix: crs.staging.account.gov.uk
    integration:
      CertificateArnV1UsEast1: PLACEHOLDER
      dnsSuffix: crs.integration.account.gov.uk
    production:
      CertificateArnV1UsEast1: PLACEHOLDER
      dnsSuffix: crs.account.gov.uk

  AccountAccess:
    dev:
      AccountId: arn:aws:iam::537124944731:root
    build:
      AccountId: arn:aws:iam::881490088364:root
    integration:
      AccountId: arn:aws:iam::605134474558:root
    production:
      AccountId: arn:aws:iam::528757826809:root
    staging:
      AccountId: arn:aws:iam::253490791635:root

  KMS:
    dev:
      PendingDeletionInDays: 7
    build:
      PendingDeletionInDays: 30
    integration:
      PendingDeletionInDays: 30
    production:
      PendingDeletionInDays: 30
    staging:
      PendingDeletionInDays: 30

Conditions:
  IsDevEnvironment: !Equals
    - !Ref Environment
    - dev

  UsePermissionsBoundary: !Not
    - !Equals
      - !Ref PermissionsBoundary
      - none

  UseCodeSigning: !Not
    - !Equals
      - !Ref CodeSigningConfigArn
      - none

  StackNameIsCrsBackend: !Equals
    - !Ref AWS::StackName
    - crs-backend

  IsProdLikeEnvironment: !Or
    - !Equals
      - !Ref Environment
      - build
    - !Equals
      - !Ref Environment
      - staging
    - !Equals
      - !Ref Environment
      - integration
    - !Equals
      - !Ref Environment
      - production

Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    AutoPublishAlias: live
    CodeSigningConfigArn: !If
      - UseCodeSigning
      - !Ref CodeSigningConfigArn
      - !Ref AWS::NoValue
    MemorySize: 512
    PermissionsBoundary: !If
      - UsePermissionsBoundary
      - !Ref PermissionsBoundary
      - !Ref AWS::NoValue
    Runtime: nodejs22.x
    Timeout: 3

Resources:
  StatusListTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !If
        - IsDevEnvironment
        - !Sub ${AWS::StackName}-StatusListTable
        - StatusListTable
      AttributeDefinitions:
        - AttributeName: uri
          AttributeType: S
        - AttributeName: idx
          AttributeType: N
      KeySchema:
        - AttributeName: uri
          KeyType: HASH
        - AttributeName: idx
          KeyType: RANGE
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
        RecoveryPeriodInDays: 7
      ProvisionedThroughput:
        ReadCapacityUnits: 100
        WriteCapacityUnits: 100

  IssueStatusListEntryFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2022
        EntryPoints:
          - src/functions/issueStatusListEntryHandler.ts
    Properties:
      FunctionName: !Sub ${AWS::StackName}-issue-status-list-entry
      Handler: src/functions/issueStatusListEntryHandler.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambdaVPCAccessExecutionRole
      VpcConfig:
        SecurityGroupIds:
          - !ImportValue
            Fn::Sub: ${VpcStackName}-AWSServicesEndpointSecurityGroupId
        SubnetIds:
          - !ImportValue
            Fn::Sub: ${VpcStackName}-PrivateSubnetIdA
          - !ImportValue
            Fn::Sub: ${VpcStackName}-PrivateSubnetIdB
          - !ImportValue
            Fn::Sub: ${VpcStackName}-PrivateSubnetIdC

  IssueStatusListEntryAccessLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/apigateway/${AWS::StackName}-issue-status-list-entry-access-logs
      RetentionInDays: 30

  CSLSIssueStatusListEntryFunctionSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython-2
      FilterPattern: ""
      LogGroupName: !Ref IssueStatusListEntryAccessLogs
      Condition: IsProdLikeEnvironment

  FindAvailableSlotsFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2022
        EntryPoints:
          - src/functions/findAvailableSlotsHandler.ts
    Properties:
      FunctionName: !Sub ${AWS::StackName}-find-available-slots
      Handler: src/functions/findAvailableSlotsHandler.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambdaVPCAccessExecutionRole
      Events:
        ScheduledEvent:
          Type: Schedule
          Properties:
            Schedule: rate(1 minute)
      VpcConfig:
        SecurityGroupIds:
          - !ImportValue
            Fn::Sub: ${VpcStackName}-AWSServicesEndpointSecurityGroupId
        SubnetIds:
          - !ImportValue
            Fn::Sub: ${VpcStackName}-PrivateSubnetIdA
          - !ImportValue
            Fn::Sub: ${VpcStackName}-PrivateSubnetIdB
          - !ImportValue
            Fn::Sub: ${VpcStackName}-PrivateSubnetIdC

            # Available Slots SQS Queue
  AvailableSlotsEncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Description: A KMS Key for encrypting the Available Slots SQS Queue
      Enabled: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Action: kms:*
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Resource: '*'
      KeySpec: SYMMETRIC_DEFAULT
      KeyUsage: ENCRYPT_DECRYPT
      MultiRegion: false
      PendingWindowInDays: !FindInMap
        - KMS
        - !Ref Environment
        - PendingDeletionInDays
      Tags:
        - Key: KeyType
          Value: Encryption Key
        - Key: Environment
          Value: !Sub ${Environment}

  AvailableSlotsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${AWS::StackName}-AvailableSlotsEncryptionKey
      TargetKeyId: !Ref AvailableSlotsEncryptionKey

  AvailableSlotsSQS:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: !Ref AvailableSlotsKeyAlias
      MessageRetentionPeriod: 1209600 # 14 days
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt AvailableSlotsQueueDLQ.Arn
        maxReceiveCount: 10

  AvailableSlotsSQSPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - SQS:DeleteMessage
              - SQS:GetQueueAttributes
              - SQS:ChangeMessageVisibility
              - SQS:ReceiveMessage
            Effect: Allow
            Principal:
              AWS:
                - !FindInMap
                  - AccountAccess
                  - !Ref Environment
                  - AccountId
            Resource:
              - !GetAtt AvailableSlotsSQS.Arn
      Queues:
        - !Ref AvailableSlotsSQS

  AvailableSlotsQueueDLQ:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: !Sub AvailableSlotsEncryptionKey
      MessageRetentionPeriod: 604800 # 7 days

      # TxMA SQS Queue
  TxMAKMSEncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Description: A KMS Key for encrypting the SQS Queue for TxMA
      Enabled: true
      KeyPolicy:
        Statement:
          - Action:
              - kms:*
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Resource:
              - '*'
          - Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:GenerateDataKey
            Effect: Allow
            Principal:
              AWS: !FindInMap
                - AccountAccess
                - !Ref Environment
                - AccountId
            Resource:
              - '*'
        Version: "2012-10-17"
      KeySpec: SYMMETRIC_DEFAULT
      KeyUsage: ENCRYPT_DECRYPT
      MultiRegion: false
      PendingWindowInDays: !FindInMap
        - KMS
        - !Ref Environment
        - PendingDeletionInDays
      Tags:
        - Key: KeyType
          Value: Encryption Key
        - Key: Environment
          Value: !Sub ${Environment}

  TxMAKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${AWS::StackName}-TxMAKMSEncryptionKey
      TargetKeyId: !Ref TxMAKMSEncryptionKey

  TxMASQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: !Ref TxMAKeyAlias
      MessageRetentionPeriod: 604800 # 7 days
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt TxMASQSQueueDeadLetterQueue.Arn
        maxReceiveCount: 5
      VisibilityTimeout: 60

  TxMASQSQueueDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: !Sub TxMAKMSEncryptionKey
      MessageRetentionPeriod: 259200 # 3 days

  TxMASQSQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
              - sqs:ChangeMessageVisibility
              - sqs:ReceiveMessage
            Effect: Allow
            Principal:
              AWS:
                - !FindInMap
                  - AccountAccess
                  - !Ref Environment
                  - AccountId
            Resource:
              - !GetAtt TxMASQSQueue.Arn
        Version: "2012-10-17"
      Queues:
        - !Ref TxMASQSQueue

        # CloudFront Set Up
  StatusListBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-${Environment}-status-list
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  StatusListBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StatusListBucket
      PolicyDocument:
        Statement:
          - Sid: AllowCloudFrontServicePrincipalReadOnly
            Action:
              - s3:GetObject
            Resource:
              - !Sub arn:aws:s3:::${StatusListBucket}/*
            Principal:
              Service: cloudfront.amazonaws.com
            Effect: Allow
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${CredentialStatusCloudFrontDistribution}

  StatusListOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Ref StatusListBucket
        Description: !Sub Ensure requests to ${StatusListBucket} are signed and thus allowed by the S3 resource policy
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  CredentialStatusRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Sub
        - ${dnsPrefix}${dnsSuffix}
        - dnsPrefix: !If
            - StackNameIsCrsBackend
            - ""
            - !Sub ${AWS::StackName}.
          dnsSuffix: !FindInMap
            - EnvironmentVariables
            - !Ref Environment
            - dnsSuffix
      Type: A
      HostedZoneId: !Sub '{{resolve:ssm:/${Environment}/Platform/Route53/PrimaryZoneID}}'
      AliasTarget:
        DNSName: !GetAtt CredentialStatusCloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2

  CredentialStatusCloudFrontCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        Comment: !Sub ${AWS::StackName} ${Environment} Credential Status
        DefaultTTL: 7200 # 2 hours
        MaxTTL: 39600 # 11 hours
        MinTTL: 0
        Name: !Sub ${AWS::StackName}-${Environment}-credential-status
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: none
          EnableAcceptEncodingGzip: false
          EnableAcceptEncodingBrotli: false
          HeadersConfig:
            HeaderBehavior: none
          QueryStringsConfig:
            QueryStringBehavior: none

  CredentialStatusCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Comment: !Sub ${AWS::StackName} ${Environment} Credential Status
        HttpVersion: http1.1
        Origins:
          - DomainName: !Sub ${StatusListBucket}.s3.${AWS::Region}.amazonaws.com
            Id: bucketOrigin
            OriginAccessControlId: !Ref StatusListOriginAccessControl
            S3OriginConfig:
              OriginAccessIdentity: ""
        DefaultCacheBehavior:
          CachedMethods:
            - GET
            - HEAD
          AllowedMethods:
            - GET
            - HEAD
          TargetOriginId: bucketOrigin
          CachePolicyId: !Ref CredentialStatusCloudFrontCachePolicy
          ViewerProtocolPolicy: allow-all
        PriceClass: PriceClass_All
        Logging:
          Bucket: log-archive-cloudfront-logs-523017967436-eu-west-2.s3.amazonaws.com
          Prefix: !Sub ${AWS::AccountId}/${AWS::StackName}/
        Aliases:
          - !Sub
            - ${dnsPrefix}${dnsSuffix}
            - dnsPrefix: !If
                - StackNameIsCrsBackend
                - ""
                - !Sub ${AWS::StackName}.
              dnsSuffix: !FindInMap
                - EnvironmentVariables
                - !Ref Environment
                - dnsSuffix
        ViewerCertificate:
          AcmCertificateArn: !If
            - StackNameIsCrsBackend
            - !FindInMap
              - EnvironmentVariables
              - !Ref Environment
              - CertificateArnV1UsEast1
            - !FindInMap
              - EnvironmentVariables
              - dev
              - CertificateWildcardArnV1UsEast1
          MinimumProtocolVersion: TLSv1.2_2021
          SslSupportMethod: sni-only
