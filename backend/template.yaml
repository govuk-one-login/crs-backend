AWSTemplateFormatVersion: "2010-09-09"

Description: Scheduled Lambda Function with esbuild Build
Mappings:
  EnvironmentVariables:
    dev:
      CertificateArn: PLACEHOLDER
    build:
      CertificateArn: PLACEHOLDER
    staging:
      CertificateArn: PLACEHOLDER
    integration:
      CertificateArn: PLACEHOLDER
    production:
      CertificateArn: PLACEHOLDER

Parameters:
  CodeSigningConfigArn:
    Description: The ARN of the Code Signing Config to use, provided by the deployment pipeline
    Type: String
    Default: none

  Environment:
    Description: The name of the environment to deploy to
    Type: String
    AllowedValues:
      - dev
      - build
      - staging
      - integration
      - production
    Default: dev

  PermissionsBoundary:
    Description: |
      The ARN of the permissions boundary to apply to any role created by the template
    Type: String
    Default: none

  VpcStackName:
    Description: |
      The stack name of the VPC where the Lambda functions will be deployed
    Type: String
    Default: devplatform-vpc

Conditions:
  UsePermissionsBoundary: !Not
    - !Equals
      - !Ref PermissionsBoundary
      - none

  UseCodeSigning: !Not
    - !Equals
      - !Ref CodeSigningConfigArn
      - none

Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    AutoPublishAlias: live
    CodeSigningConfigArn: !If
      - UseCodeSigning
      - !Ref CodeSigningConfigArn
      - !Ref AWS::NoValue
    MemorySize: 512
    PermissionsBoundary: !If
      - UsePermissionsBoundary
      - !Ref PermissionsBoundary
      - !Ref AWS::NoValue
    Runtime: nodejs22.x
    Timeout: 3

Resources:
  FindAvailableSlotsFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2022
        EntryPoints:
          - src/functions/findAvailableSlotsHandler.ts
    Properties:
      FunctionName: !Sub ${AWS::StackName}-find-available-slots
      Handler: src/functions/findAvailableSlotsHandler.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambdaVPCAccessExecutionRole
      Events:
        ScheduledEvent:
          Type: Schedule
          Properties:
            Schedule: rate(1 minute)
      VpcConfig:
        SecurityGroupIds:
          - !ImportValue
            Fn::Sub: ${VpcStackName}-AWSServicesEndpointSecurityGroupId
        SubnetIds:
          - !ImportValue
            Fn::Sub: ${VpcStackName}-PrivateSubnetIdA
          - !ImportValue
            Fn::Sub: ${VpcStackName}-PrivateSubnetIdB
          - !ImportValue
            Fn::Sub: ${VpcStackName}-PrivateSubnetIdC
      Tags:
        Environment: !Ref Environment # This tag can be removed. Only here to appease cfn-lint and use the Environment parameter

  StatusListBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-${Environment}-status-list"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  StatusListOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Ref StatusListBucket
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  CredentialStatusRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Sub "${AWS::StackName}.crl.mobile.dev.account.gov.uk."
      Type: A
      HostedZoneId: !Sub "{{resolve:ssm:/${Environment}/Platform/Route53/PrimaryZoneID}}"
      AliasTarget:
        DNSName: !GetAtt CredentialStatusCloudfrontDistribution.DomainName
        HostedZoneId: "Z2FDTNDATAQYW2"

  CredentialStatusCloudfrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Comment: !Sub "${AWS::StackName} CRL Cloudfront Distribution"
        DefaultRootObject: index.html
        HttpVersion: http1.1
        Origins:
          - DomainName: !Sub "${CRLBucket}.s3.${AWS::Region}.amazonaws.com"
            Id: bucketOrigin
            OriginAccessControlId: !Ref CRLOriginAccessControl
            S3OriginConfig:
              OriginAccessIdentity: ""
        DefaultCacheBehavior:
          CachedMethods:
            - GET
            - HEAD
          AllowedMethods:
            - GET
            - HEAD
          TargetOriginId: bucketOrigin
          CachePolicyId: "4135ea2d-6df8-44a3-9df3-4b5a84be39ad" # see https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html#managed-cache-policy-caching-disabled
          ViewerProtocolPolicy: allow-all
        PriceClass: PriceClass_All
        Logging: !If
          - AddStandardLogging
          - Bucket: "log-archive-cloudfront-logs-523017967436-eu-west-2.s3.amazonaws.com"
            Prefix: !Sub "${AWS::AccountId}/${AWS::StackName}/"
          - !Ref "AWS::NoValue"
        Aliases:
          - !Sub "${AWS::StackName}-crl.mobile.dev.account.gov.uk"
        ViewerCertificate:
          AcmCertificateArn: !Ref CloudFrontCertArn
          MinimumProtocolVersion: TLSv1.1_2016
          SslSupportMethod: sni-only
